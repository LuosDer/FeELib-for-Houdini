/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <SOP/SOP_GraphProxy.h>

#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <UT/UT_EnvControl.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;
namespace SOP_FeE_Normal2D_1_0Enums
{
    enum class GroupType
    {
        GUESS = 0,
        PRIM,
        POINT,
        VERTEX,
        EDGE
    };
    enum class Normal3DAttribClass
    {
        PRIM = 0,
        POINT,
        VERTEX,
        DETAIL,
        POINTVERTEX,
        ALL
    };
}


class  SOP_FeE_Normal2D_1_0Parms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_FeE_Normal2D_1_0Parms()
    {
        myGroup = ""_sh;
        myGroupType = 0;
        myPosAttrib = "P"_sh;
        myNormal2DAttribName = "N"_sh;
        myExtrapolateEnds = true;
        myScaleByTurns = true;
        myNormalize = true;
        myUniScale = 1;
        myBlend = 0;
        myUseConstantNormal3D = false;
        myFindNormal3D = false;
        myAddNormal3DIfNoFind = true;
        myNormal3DAttribClass = 0;
        myNormal3DAttrib = "N"_sh;
        myDefaultNormal3D = UT_Vector3D(0,1,0);
        myOutTopoAttrib = false;
        mySubscribeRatio = 16;
        myMinGrainSize = 1024;

    }

    explicit SOP_FeE_Normal2D_1_0Parms(const SOP_FeE_Normal2D_1_0Parms &) = default;

    ~SOP_FeE_Normal2D_1_0Parms() override {}

    bool operator==(const SOP_FeE_Normal2D_1_0Parms &src) const
    {
        if (myGroup != src.myGroup) return false;
        if (myGroupType != src.myGroupType) return false;
        if (myPosAttrib != src.myPosAttrib) return false;
        if (myNormal2DAttribName != src.myNormal2DAttribName) return false;
        if (myExtrapolateEnds != src.myExtrapolateEnds) return false;
        if (myScaleByTurns != src.myScaleByTurns) return false;
        if (myNormalize != src.myNormalize) return false;
        if (myUniScale != src.myUniScale) return false;
        if (myBlend != src.myBlend) return false;
        if (myUseConstantNormal3D != src.myUseConstantNormal3D) return false;
        if (myFindNormal3D != src.myFindNormal3D) return false;
        if (myAddNormal3DIfNoFind != src.myAddNormal3DIfNoFind) return false;
        if (myNormal3DAttribClass != src.myNormal3DAttribClass) return false;
        if (myNormal3DAttrib != src.myNormal3DAttrib) return false;
        if (myDefaultNormal3D != src.myDefaultNormal3D) return false;
        if (myOutTopoAttrib != src.myOutTopoAttrib) return false;
        if (mySubscribeRatio != src.mySubscribeRatio) return false;
        if (myMinGrainSize != src.myMinGrainSize) return false;

        return true;
    }
    bool operator!=(const SOP_FeE_Normal2D_1_0Parms &src) const
    {
        return !operator==(src);
    }
    using GroupType = SOP_FeE_Normal2D_1_0Enums::GroupType;
    using Normal3DAttribClass = SOP_FeE_Normal2D_1_0Enums::Normal3DAttribClass;



    void        buildFromOp(const SOP_GraphProxy *graph, exint nodeidx, fpreal time, DEP_MicroNode *depnode)
    {
        myGroup = ""_sh;
        if (true)
            graph->evalOpParm(myGroup, nodeidx, "group", time, 0);
        myGroupType = 0;
        if (true)
            graph->evalOpParm(myGroupType, nodeidx, "groupType", time, 0);
        myPosAttrib = "P"_sh;
        if (true)
            graph->evalOpParm(myPosAttrib, nodeidx, "posAttrib", time, 0);
        myNormal2DAttribName = "N"_sh;
        if (true)
            graph->evalOpParm(myNormal2DAttribName, nodeidx, "normal2DAttribName", time, 0);
        myExtrapolateEnds = true;
        if (true)
            graph->evalOpParm(myExtrapolateEnds, nodeidx, "extrapolateEnds", time, 0);
        myScaleByTurns = true;
        if (true)
            graph->evalOpParm(myScaleByTurns, nodeidx, "scaleByTurns", time, 0);
        myNormalize = true;
        if (true && ( (true&&!(((getScaleByTurns()==1)))) ) )
            graph->evalOpParm(myNormalize, nodeidx, "normalize", time, 0);
        myUniScale = 1;
        if (true)
            graph->evalOpParm(myUniScale, nodeidx, "uniScale", time, 0);
        myBlend = 0;
        if (true)
            graph->evalOpParm(myBlend, nodeidx, "blend", time, 0);
        myUseConstantNormal3D = false;
        if (true)
            graph->evalOpParm(myUseConstantNormal3D, nodeidx, "useConstantNormal3D", time, 0);
        myFindNormal3D = false;
        if (true && ( (true&&!(((getUseConstantNormal3D()==1)))) ) )
            graph->evalOpParm(myFindNormal3D, nodeidx, "findNormal3D", time, 0);
        myAddNormal3DIfNoFind = true;
        if (true && ( (true&&!(((getUseConstantNormal3D()==1))||((getFindNormal3D()==0)))) ) )
            graph->evalOpParm(myAddNormal3DIfNoFind, nodeidx, "addNormal3DIfNoFind", time, 0);
        myNormal3DAttribClass = 0;
        if (true && ( (true&&!(((getUseConstantNormal3D()==1))||((getFindNormal3D()==0)))) ) )
            graph->evalOpParm(myNormal3DAttribClass, nodeidx, "normal3DAttribClass", time, 0);
        myNormal3DAttrib = "N"_sh;
        if (true && ( (true&&!(((getUseConstantNormal3D()==1))||((getFindNormal3D()==0)))) ) )
            graph->evalOpParm(myNormal3DAttrib, nodeidx, "normal3DAttrib", time, 0);
        myDefaultNormal3D = UT_Vector3D(0,1,0);
        if (true && ( (true&&!(((getUseConstantNormal3D()==0)&&(getAddNormal3DIfNoFind()==1))||((getUseConstantNormal3D()==0)&&(getFindNormal3D()==0)))) ) )
            graph->evalOpParm(myDefaultNormal3D, nodeidx, "defaultNormal3D", time, 0);
        myOutTopoAttrib = false;
        if (true)
            graph->evalOpParm(myOutTopoAttrib, nodeidx, "outTopoAttrib", time, 0);
        mySubscribeRatio = 16;
        if (true)
            graph->evalOpParm(mySubscribeRatio, nodeidx, "subscribeRatio", time, 0);
        myMinGrainSize = 1024;
        if (true)
            graph->evalOpParm(myMinGrainSize, nodeidx, "minGrainSize", time, 0);

    }


    void loadFromOpSubclass(const LoadParms &loadparms) override
    {
        buildFromOp(loadparms.graph(), loadparms.nodeIdx(), loadparms.context().getTime(), loadparms.depnode());
    }


    void copyFrom(const SOP_NodeParms *src) override
    {
        *this = *((const SOP_FeE_Normal2D_1_0Parms *)src);
    }

    template <typename T>
    void
    doGetParmValue(TempIndex idx, TempIndex instance, T &value) const
    {
        if (idx.size() < 1)
            return;
        UT_ASSERT(idx.size() == instance.size()+1);
        if (idx.size() != instance.size()+1)
            return;
        switch (idx[0])
        {
            case 0:
                coerceValue(value, myGroup);
                break;
            case 1:
                coerceValue(value, myGroupType);
                break;
            case 2:
                coerceValue(value, myPosAttrib);
                break;
            case 3:
                coerceValue(value, myNormal2DAttribName);
                break;
            case 4:
                coerceValue(value, myExtrapolateEnds);
                break;
            case 5:
                coerceValue(value, myScaleByTurns);
                break;
            case 6:
                coerceValue(value, myNormalize);
                break;
            case 7:
                coerceValue(value, myUniScale);
                break;
            case 8:
                coerceValue(value, myBlend);
                break;
            case 9:
                coerceValue(value, myUseConstantNormal3D);
                break;
            case 10:
                coerceValue(value, myFindNormal3D);
                break;
            case 11:
                coerceValue(value, myAddNormal3DIfNoFind);
                break;
            case 12:
                coerceValue(value, myNormal3DAttribClass);
                break;
            case 13:
                coerceValue(value, myNormal3DAttrib);
                break;
            case 14:
                coerceValue(value, myDefaultNormal3D);
                break;
            case 15:
                coerceValue(value, myOutTopoAttrib);
                break;
            case 16:
                coerceValue(value, mySubscribeRatio);
                break;
            case 17:
                coerceValue(value, myMinGrainSize);
                break;

        }
    }

    void getNestParmValue(TempIndex idx, TempIndex instance, exint &value) const override
    { doGetParmValue(idx, instance, value); }
    void getNestParmValue(TempIndex idx, TempIndex instance, fpreal &value) const override
    { doGetParmValue(idx, instance, value); }
    void getNestParmValue(TempIndex idx, TempIndex instance, UT_Vector2D &value) const override
    { doGetParmValue(idx, instance, value); }
    void getNestParmValue(TempIndex idx, TempIndex instance, UT_Vector3D &value) const override
    { doGetParmValue(idx, instance, value); }
    void getNestParmValue(TempIndex idx, TempIndex instance, UT_Vector4D &value) const override
    { doGetParmValue(idx, instance, value); }
    void getNestParmValue(TempIndex idx, TempIndex instance, UT_Matrix2D &value) const override
    { doGetParmValue(idx, instance, value); }
    void getNestParmValue(TempIndex idx, TempIndex instance, UT_Matrix3D &value) const override
    { doGetParmValue(idx, instance, value); }
    void getNestParmValue(TempIndex idx, TempIndex instance, UT_Matrix4D &value) const override
    { doGetParmValue(idx, instance, value); }
    void getNestParmValue(TempIndex idx, TempIndex instance, UT_StringHolder &value) const override
    { doGetParmValue(idx, instance, value); }
    void getNestParmValue(TempIndex idx, TempIndex instance, UT_SharedPtr<UT_Ramp> &value) const override
    { doGetParmValue(idx, instance, value); }
    void getNestParmValue(TempIndex idx, TempIndex instance, PRM_DataItemHandle &value) const override
    { doGetParmValue(idx, instance, value); }

    template <typename T>
    void
    doSetParmValue(TempIndex idx, TempIndex instance, const T &value) 
    {
        if (idx.size() < 1)
            return;
        UT_ASSERT(idx.size() == instance.size()+1);
        if (idx.size() != instance.size()+1)
            return;
        switch (idx[0])
        {
            case 0:
                coerceValue(myGroup, ( ( value ) ));
                break;
            case 1:
                coerceValue(myGroupType, clampMinValue(0,  clampMaxValue(4,  value ) ));
                break;
            case 2:
                coerceValue(myPosAttrib, ( ( value ) ));
                break;
            case 3:
                coerceValue(myNormal2DAttribName, ( ( value ) ));
                break;
            case 4:
                coerceValue(myExtrapolateEnds, ( ( value ) ));
                break;
            case 5:
                coerceValue(myScaleByTurns, ( ( value ) ));
                break;
            case 6:
                coerceValue(myNormalize, ( ( value ) ));
                break;
            case 7:
                coerceValue(myUniScale, ( ( value ) ));
                break;
            case 8:
                coerceValue(myBlend, clampMinValue(-1,  clampMaxValue(1,  value ) ));
                break;
            case 9:
                coerceValue(myUseConstantNormal3D, ( ( value ) ));
                break;
            case 10:
                coerceValue(myFindNormal3D, ( ( value ) ));
                break;
            case 11:
                coerceValue(myAddNormal3DIfNoFind, ( ( value ) ));
                break;
            case 12:
                coerceValue(myNormal3DAttribClass, clampMinValue(0,  clampMaxValue(5,  value ) ));
                break;
            case 13:
                coerceValue(myNormal3DAttrib, ( ( value ) ));
                break;
            case 14:
                coerceValue(myDefaultNormal3D, ( ( value ) ));
                break;
            case 15:
                coerceValue(myOutTopoAttrib, ( ( value ) ));
                break;
            case 16:
                coerceValue(mySubscribeRatio, clampMinValue(0,  ( value ) ));
                break;
            case 17:
                coerceValue(myMinGrainSize, clampMinValue(0,  ( value ) ));
                break;

        }
    }

    void setNestParmValue(TempIndex idx, TempIndex instance, const exint &value)  override
    { doSetParmValue(idx, instance, value); }
    void setNestParmValue(TempIndex idx, TempIndex instance, const fpreal &value)  override
    { doSetParmValue(idx, instance, value); }
    void setNestParmValue(TempIndex idx, TempIndex instance, const UT_Vector2D &value)  override
    { doSetParmValue(idx, instance, value); }
    void setNestParmValue(TempIndex idx, TempIndex instance, const UT_Vector3D &value)  override
    { doSetParmValue(idx, instance, value); }
    void setNestParmValue(TempIndex idx, TempIndex instance, const UT_Vector4D &value)  override
    { doSetParmValue(idx, instance, value); }
    void setNestParmValue(TempIndex idx, TempIndex instance, const UT_Matrix2D &value)  override
    { doSetParmValue(idx, instance, value); }
    void setNestParmValue(TempIndex idx, TempIndex instance, const UT_Matrix3D &value)  override
    { doSetParmValue(idx, instance, value); }
    void setNestParmValue(TempIndex idx, TempIndex instance, const UT_Matrix4D &value)  override
    { doSetParmValue(idx, instance, value); }
    void setNestParmValue(TempIndex idx, TempIndex instance, const UT_StringHolder &value)  override
    { doSetParmValue(idx, instance, value); }
    void setNestParmValue(TempIndex idx, TempIndex instance, const UT_SharedPtr<UT_Ramp> &value)  override
    { doSetParmValue(idx, instance, value); }
    void setNestParmValue(TempIndex idx, TempIndex instance, const PRM_DataItemHandle &value)  override
    { doSetParmValue(idx, instance, value); }

    exint getNestNumParms(TempIndex idx) const override
    {
        if (idx.size() == 0)
            return 18;
        switch (idx[0])
        {

        }
        // Invalid
        return 0;
    }

    const char *getNestParmName(TempIndex fieldnum) const override
    {
        if (fieldnum.size() < 1)
            return 0;
        switch (fieldnum[0])
        {
            case 0:
                return "group";
            case 1:
                return "groupType";
            case 2:
                return "posAttrib";
            case 3:
                return "normal2DAttribName";
            case 4:
                return "extrapolateEnds";
            case 5:
                return "scaleByTurns";
            case 6:
                return "normalize";
            case 7:
                return "uniScale";
            case 8:
                return "blend";
            case 9:
                return "useConstantNormal3D";
            case 10:
                return "findNormal3D";
            case 11:
                return "addNormal3DIfNoFind";
            case 12:
                return "normal3DAttribClass";
            case 13:
                return "normal3DAttrib";
            case 14:
                return "defaultNormal3D";
            case 15:
                return "outTopoAttrib";
            case 16:
                return "subscribeRatio";
            case 17:
                return "minGrainSize";

        }
        return 0;
    }

    ParmType getNestParmType(TempIndex fieldnum) const override
    {
        if (fieldnum.size() < 1)
            return PARM_UNSUPPORTED;
        switch (fieldnum[0])
        {
            case 0:
                return PARM_STRING;
            case 1:
                return PARM_INTEGER;
            case 2:
                return PARM_STRING;
            case 3:
                return PARM_STRING;
            case 4:
                return PARM_INTEGER;
            case 5:
                return PARM_INTEGER;
            case 6:
                return PARM_INTEGER;
            case 7:
                return PARM_FLOAT;
            case 8:
                return PARM_FLOAT;
            case 9:
                return PARM_INTEGER;
            case 10:
                return PARM_INTEGER;
            case 11:
                return PARM_INTEGER;
            case 12:
                return PARM_INTEGER;
            case 13:
                return PARM_STRING;
            case 14:
                return PARM_VECTOR3;
            case 15:
                return PARM_INTEGER;
            case 16:
                return PARM_INTEGER;
            case 17:
                return PARM_INTEGER;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            const char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myGroup);
        saveData(os, myGroupType);
        saveData(os, myPosAttrib);
        saveData(os, myNormal2DAttribName);
        saveData(os, myExtrapolateEnds);
        saveData(os, myScaleByTurns);
        saveData(os, myNormalize);
        saveData(os, myUniScale);
        saveData(os, myBlend);
        saveData(os, myUseConstantNormal3D);
        saveData(os, myFindNormal3D);
        saveData(os, myAddNormal3DIfNoFind);
        saveData(os, myNormal3DAttribClass);
        saveData(os, myNormal3DAttrib);
        saveData(os, myDefaultNormal3D);
        saveData(os, myOutTopoAttrib);
        saveData(os, mySubscribeRatio);
        saveData(os, myMinGrainSize);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myGroup);
        loadData(is, myGroupType);
        loadData(is, myPosAttrib);
        loadData(is, myNormal2DAttribName);
        loadData(is, myExtrapolateEnds);
        loadData(is, myScaleByTurns);
        loadData(is, myNormalize);
        loadData(is, myUniScale);
        loadData(is, myBlend);
        loadData(is, myUseConstantNormal3D);
        loadData(is, myFindNormal3D);
        loadData(is, myAddNormal3DIfNoFind);
        loadData(is, myNormal3DAttribClass);
        loadData(is, myNormal3DAttrib);
        loadData(is, myDefaultNormal3D);
        loadData(is, myOutTopoAttrib);
        loadData(is, mySubscribeRatio);
        loadData(is, myMinGrainSize);

        return true;
    }

    const UT_StringHolder & getGroup() const { return myGroup; }
    void setGroup(const UT_StringHolder & val) { myGroup = val; }
    UT_StringHolder opGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "group", cookparms.getCookTime(), 0);
        return result;
    }
    GroupType getGroupType() const { return GroupType(myGroupType); }
    void setGroupType(GroupType val) { myGroupType = int64(val); }
    GroupType opGroupType(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroupType();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "groupType", cookparms.getCookTime(), 0);
        return GroupType(result);
    }
    const UT_StringHolder & getPosAttrib() const { return myPosAttrib; }
    void setPosAttrib(const UT_StringHolder & val) { myPosAttrib = val; }
    UT_StringHolder opPosAttrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPosAttrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "posAttrib", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getNormal2DAttribName() const { return myNormal2DAttribName; }
    void setNormal2DAttribName(const UT_StringHolder & val) { myNormal2DAttribName = val; }
    UT_StringHolder opNormal2DAttribName(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getNormal2DAttribName();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "normal2DAttribName", cookparms.getCookTime(), 0);
        return result;
    }
    bool getExtrapolateEnds() const { return myExtrapolateEnds; }
    void setExtrapolateEnds(bool val) { myExtrapolateEnds = val; }
    bool opExtrapolateEnds(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getExtrapolateEnds();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "extrapolateEnds", cookparms.getCookTime(), 0);
        return result;
    }
    bool getScaleByTurns() const { return myScaleByTurns; }
    void setScaleByTurns(bool val) { myScaleByTurns = val; }
    bool opScaleByTurns(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getScaleByTurns();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "scaleByTurns", cookparms.getCookTime(), 0);
        return result;
    }
    bool getNormalize() const { return myNormalize; }
    void setNormalize(bool val) { myNormalize = val; }
    bool opNormalize(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getNormalize();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "normalize", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getUniScale() const { return myUniScale; }
    void setUniScale(fpreal64 val) { myUniScale = val; }
    fpreal64 opUniScale(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getUniScale();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "uniScale", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getBlend() const { return myBlend; }
    void setBlend(fpreal64 val) { myBlend = val; }
    fpreal64 opBlend(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getBlend();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "blend", cookparms.getCookTime(), 0);
        return result;
    }
    bool getUseConstantNormal3D() const { return myUseConstantNormal3D; }
    void setUseConstantNormal3D(bool val) { myUseConstantNormal3D = val; }
    bool opUseConstantNormal3D(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getUseConstantNormal3D();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "useConstantNormal3D", cookparms.getCookTime(), 0);
        return result;
    }
    bool getFindNormal3D() const { return myFindNormal3D; }
    void setFindNormal3D(bool val) { myFindNormal3D = val; }
    bool opFindNormal3D(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getFindNormal3D();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "findNormal3D", cookparms.getCookTime(), 0);
        return result;
    }
    bool getAddNormal3DIfNoFind() const { return myAddNormal3DIfNoFind; }
    void setAddNormal3DIfNoFind(bool val) { myAddNormal3DIfNoFind = val; }
    bool opAddNormal3DIfNoFind(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getAddNormal3DIfNoFind();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "addNormal3DIfNoFind", cookparms.getCookTime(), 0);
        return result;
    }
    Normal3DAttribClass getNormal3DAttribClass() const { return Normal3DAttribClass(myNormal3DAttribClass); }
    void setNormal3DAttribClass(Normal3DAttribClass val) { myNormal3DAttribClass = int64(val); }
    Normal3DAttribClass opNormal3DAttribClass(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getNormal3DAttribClass();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "normal3DAttribClass", cookparms.getCookTime(), 0);
        return Normal3DAttribClass(result);
    }
    const UT_StringHolder & getNormal3DAttrib() const { return myNormal3DAttrib; }
    void setNormal3DAttrib(const UT_StringHolder & val) { myNormal3DAttrib = val; }
    UT_StringHolder opNormal3DAttrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getNormal3DAttrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "normal3DAttrib", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector3D getDefaultNormal3D() const { return myDefaultNormal3D; }
    void setDefaultNormal3D(UT_Vector3D val) { myDefaultNormal3D = val; }
    UT_Vector3D opDefaultNormal3D(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDefaultNormal3D();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "defaultNormal3D", cookparms.getCookTime(), 0);
        return result;
    }
    bool getOutTopoAttrib() const { return myOutTopoAttrib; }
    void setOutTopoAttrib(bool val) { myOutTopoAttrib = val; }
    bool opOutTopoAttrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getOutTopoAttrib();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "outTopoAttrib", cookparms.getCookTime(), 0);
        return result;
    }
    int64 getSubscribeRatio() const { return mySubscribeRatio; }
    void setSubscribeRatio(int64 val) { mySubscribeRatio = val; }
    int64 opSubscribeRatio(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSubscribeRatio();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "subscribeRatio", cookparms.getCookTime(), 0);
        return result;
    }
    int64 getMinGrainSize() const { return myMinGrainSize; }
    void setMinGrainSize(int64 val) { myMinGrainSize = val; }
    int64 opMinGrainSize(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getMinGrainSize();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "minGrainSize", cookparms.getCookTime(), 0);
        return result;
    }

private:
    UT_StringHolder myGroup;
    int64 myGroupType;
    UT_StringHolder myPosAttrib;
    UT_StringHolder myNormal2DAttribName;
    bool myExtrapolateEnds;
    bool myScaleByTurns;
    bool myNormalize;
    fpreal64 myUniScale;
    fpreal64 myBlend;
    bool myUseConstantNormal3D;
    bool myFindNormal3D;
    bool myAddNormal3DIfNoFind;
    int64 myNormal3DAttribClass;
    UT_StringHolder myNormal3DAttrib;
    UT_Vector3D myDefaultNormal3D;
    bool myOutTopoAttrib;
    int64 mySubscribeRatio;
    int64 myMinGrainSize;

};
